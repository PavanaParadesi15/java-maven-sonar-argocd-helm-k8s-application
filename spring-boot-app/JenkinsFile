pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        steps {
            checkout([
                $class: 'GitSCM',
                branches: [[name: '*/main']],
                userRemoteConfigs: [[
                    url: 'https://github.com/PavanaParadesi15/java-maven-sonar-argocd-helm-k8s-application/',
                    credentialsId: 'github'
                ]]
            ])
    sh 'echo passed'
        // We don't need to do anything here, as the source code is already checked out by Jenkins when the jenkins file is in the same directory as the application.
        //git branch: 'main', url: 'https://github.com/PavanaParadesi15/java-maven-sonar-argocd-helm-k8s-application.git'
        //credentialsId: 'github'
      }
      }
    }
  }
  
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        // Maven is already available in the docker image which is used as agent in the initial steps
        // Go to application folder and execute maven target
        //mvn clean package finds pom.xml in the repo, to get the dependencies and build the project
        // In this stage an artifact is generated which is a JAR file.
        sh 'cd java-maven-sonar-argocd-helm-k8s-application/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        // Jenkins will use this sonarqube URL to send the report to sonar server
        SONAR_URL = "http://54.147.168.218:9000"
      }
      steps {
        // Maven target to execute sonarqube with sonar authentication token
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    // Stage to build docker image and push it to docker hub
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "pavana5/jenkins-ci-cd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        // docker credentials stored in jenkins with name "docker" . Jenkins reads docker credentials from the credentials store.
        REGISTRY_CREDENTIALS = credentials('docker')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker") {
                dockerImage.push()
            }
        }
      }
    }
    // Updated deploymentvfile with the latest image tag
    // Argo CD pulls the deployment file from the git repository and deploys the application to the K8s cluster.
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "java-maven-sonar-argocd-helm-k8s-application"
            GIT_USER_NAME = "PavanaParadesi15"
        }
        // need github credentials to push the updated image to deployment file in github
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "pavana.p0215@gmail.com"
                    git config user.name "PavanaParadesi15"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s-application/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s-application/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
